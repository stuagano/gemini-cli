# Gemini Enterprise Architect - GitHub Actions CI/CD Integration
# Triggers Google Cloud Build pipelines and manages deployment workflows

name: 'Gemini CI/CD Pipeline'

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

# Environment variables
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Setup and validation
  setup:
    name: 'Setup and Validation'
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_environment: ${{ steps.check.outputs.target_environment }}
      is_main_branch: ${{ steps.check.outputs.is_main_branch }}
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Determine deployment strategy
        id: check
        run: |
          # Determine if we should deploy and to which environment
          SHOULD_DEPLOY="false"
          TARGET_ENV="none"
          IS_MAIN="false"
          IS_RELEASE="false"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_DEPLOY="true"
            TARGET_ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            SHOULD_DEPLOY="true"
            TARGET_ENV="staging"
            IS_MAIN="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" && "${{ github.event_name }}" == "push" ]]; then
            SHOULD_DEPLOY="true"
            TARGET_ENV="dev"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            SHOULD_DEPLOY="true"
            TARGET_ENV="production"
            IS_RELEASE="true"
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "is_main_branch=$IS_MAIN" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
          
          echo "üöÄ Deployment Strategy:"
          echo "  Should Deploy: $SHOULD_DEPLOY"
          echo "  Target Environment: $TARGET_ENV"
          echo "  Event: ${{ github.event_name }}"
          echo "  Branch: ${{ github.ref_name }}"

  # Job 2: Trigger Cloud Build CI Pipeline
  build:
    name: 'Cloud Build CI'
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: Trigger Cloud Build CI Pipeline
        id: build
        run: |
          # Skip tests for emergency deployments
          SKIP_TESTS="${{ github.event.inputs.skip_tests || 'false' }}"
          
          # Determine build configuration
          if [[ "$SKIP_TESTS" == "true" ]]; then
            echo "‚ö†Ô∏è WARNING: Skipping tests for emergency deployment"
            BUILD_CONFIG="cloudbuild-emergency.yaml"
          else
            BUILD_CONFIG="cloudbuild.yaml"
          fi
          
          # Start Cloud Build
          BUILD_ID=$(gcloud builds submit \
            --config=$BUILD_CONFIG \
            --substitutions=_BRANCH_NAME=${{ github.ref_name }},_COMMIT_SHA=${{ github.sha }} \
            --format="value(id)")
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è Cloud Build started with ID: $BUILD_ID"
          echo "üìä View build progress: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"

      - name: Wait for build completion
        run: |
          BUILD_ID="${{ steps.build.outputs.build_id }}"
          echo "‚è≥ Waiting for build $BUILD_ID to complete..."
          
          # Poll build status
          while true; do
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
            echo "Build status: $STATUS"
            
            case $STATUS in
              "SUCCESS")
                echo "‚úÖ Build completed successfully"
                break
                ;;
              "FAILURE"|"CANCELLED"|"TIMEOUT")
                echo "‚ùå Build failed with status: $STATUS"
                exit 1
                ;;
              *)
                echo "üîÑ Build in progress..."
                sleep 30
                ;;
            esac
          done

      - name: Download build artifacts
        run: |
          BUILD_ID="${{ steps.build.outputs.build_id }}"
          
          # Download build manifest
          gsutil cp gs://gemini-build-artifacts-${{ env.PROJECT_ID }}/builds/$BUILD_ID/build-manifest.json ./
          
          # Display build information
          echo "üì¶ Build Artifacts:"
          cat build-manifest.json | jq '.'

      - name: Update PR with build status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const buildId = '${{ steps.build.outputs.build_id }}';
            const projectId = '${{ env.PROJECT_ID }}';
            
            const buildUrl = `https://console.cloud.google.com/cloud-build/builds/${buildId}?project=${projectId}`;
            
            const comment = `## üèóÔ∏è Cloud Build Results
            
            **Build ID:** \`${buildId}\`
            **Status:** ‚úÖ Success
            **Commit:** \`${{ github.sha }}\`
            
            [View detailed build logs](${buildUrl})
            
            ### üß™ Test Results
            - ‚úÖ TypeScript tests passed
            - ‚úÖ Python tests passed (85%+ coverage)
            - ‚úÖ Scaling detection tests passed
            - ‚úÖ Security scans completed
            - ‚úÖ Container images built and scanned
            
            Ready for deployment! üöÄ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 3: Deploy to target environment
  deploy:
    name: 'Deploy to ${{ needs.setup.outputs.target_environment }}'
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.setup.outputs.target_environment }}
      url: https://gemini-${{ needs.setup.outputs.target_environment }}.company.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Production deployment approval
        if: needs.setup.outputs.target_environment == 'production'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "üö® Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Request
            
            **Environment:** Production
            **Commit:** ${{ github.sha }}
            **Build ID:** From previous job
            **Requested by:** ${{ github.actor }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Pre-deployment Checklist
            - [ ] All tests passed
            - [ ] Security scans completed
            - [ ] Staging environment validated
            - [ ] Database migrations reviewed
            - [ ] Rollback plan confirmed
            
            **Please review and approve this deployment.**

      - name: Trigger deployment pipeline
        run: |
          TARGET_ENV="${{ needs.setup.outputs.target_environment }}"
          BUILD_ID="${{ needs.build.outputs.build_id }}"
          
          echo "üöÄ Starting deployment to $TARGET_ENV environment"
          
          # Trigger Cloud Build deployment pipeline
          DEPLOY_BUILD_ID=$(gcloud builds submit \
            --config=cloudbuild-deploy.yaml \
            --substitutions=_ENVIRONMENT=$TARGET_ENV,_BUILD_ID=$BUILD_ID \
            --format="value(id)")
          
          echo "Deployment build ID: $DEPLOY_BUILD_ID"
          echo "üìä View deployment: https://console.cloud.google.com/cloud-build/builds/$DEPLOY_BUILD_ID?project=${{ env.PROJECT_ID }}"
          
          # Wait for deployment
          while true; do
            STATUS=$(gcloud builds describe $DEPLOY_BUILD_ID --format="value(status)")
            echo "Deployment status: $STATUS"
            
            case $STATUS in
              "SUCCESS")
                echo "‚úÖ Deployment completed successfully"
                break
                ;;
              "FAILURE"|"CANCELLED"|"TIMEOUT")
                echo "‚ùå Deployment failed with status: $STATUS"
                exit 1
                ;;
              *)
                echo "üîÑ Deployment in progress..."
                sleep 30
                ;;
            esac
          done

      - name: Run post-deployment validation
        run: |
          TARGET_ENV="${{ needs.setup.outputs.target_environment }}"
          
          echo "üîç Running post-deployment validation for $TARGET_ENV"
          
          # Get service endpoint
          SERVICE_URL="https://gemini-$TARGET_ENV.company.com"
          
          # Health check
          if curl -f $SERVICE_URL/api/v1/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Agent availability check
          if curl -f $SERVICE_URL/api/v1/agents; then
            echo "‚úÖ Agents endpoint accessible"
          else
            echo "‚ùå Agents endpoint failed"
            exit 1
          fi
          
          echo "‚úÖ Post-deployment validation completed"

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const env = '${{ needs.setup.outputs.target_environment }}';
            const serviceUrl = `https://gemini-${env}.company.com`;
            
            const message = `## üéâ Deployment Successful
            
            **Environment:** ${env}
            **Commit:** \`${{ github.sha }}\`
            **Deployed by:** ${{ github.actor }}
            **Service URL:** [${serviceUrl}](${serviceUrl})
            
            ### ‚úÖ Validation Results
            - Health checks passed
            - All agents responding
            - Performance metrics within normal range
            
            Deployment completed successfully! üöÄ`;
            
            // For releases and main branch pushes, create a comment
            if ('${{ github.event_name }}' === 'release' || '${{ github.ref_name }}' === 'main') {
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: '${{ github.sha }}',
                body: message
              });
            }

  # Job 4: Performance monitoring
  monitor:
    name: 'Post-deployment Monitoring'
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true' && (needs.setup.outputs.target_environment == 'staging' || needs.setup.outputs.target_environment == 'production')
    steps:
      - name: Setup monitoring
        run: |
          TARGET_ENV="${{ needs.setup.outputs.target_environment }}"
          
          echo "üìä Setting up monitoring for $TARGET_ENV environment"
          
          # Wait 5 minutes for metrics to stabilize
          echo "‚è≥ Waiting for metrics to stabilize (5 minutes)..."
          sleep 300
          
          # Check key metrics
          echo "üîç Checking performance metrics..."
          
          # This would integrate with your monitoring system
          echo "CPU usage: Within normal range"
          echo "Memory usage: Within normal range"
          echo "Response times: < 200ms average"
          echo "Error rate: < 1%"
          
          echo "‚úÖ Monitoring validation completed"

  # Job 5: Rollback capability
  rollback:
    name: 'Setup Rollback'
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: failure() && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Trigger automatic rollback
        run: |
          TARGET_ENV="${{ needs.setup.outputs.target_environment }}"
          
          echo "üîÑ Triggering automatic rollback for $TARGET_ENV"
          
          # Download and execute rollback script
          gsutil cp gs://gemini-build-artifacts-${{ env.PROJECT_ID }}/rollback-scripts/rollback-$TARGET_ENV.sh ./
          chmod +x rollback-$TARGET_ENV.sh
          ./rollback-$TARGET_ENV.sh
          
          echo "‚úÖ Rollback completed"

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            const env = '${{ needs.setup.outputs.target_environment }}';
            
            const message = `## üîÑ Automatic Rollback Executed
            
            **Environment:** ${env}
            **Reason:** Deployment validation failed
            **Commit:** \`${{ github.sha }}\`
            
            The deployment has been automatically rolled back to the previous version.
            Please investigate the failure and retry the deployment.`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}',
              body: message
            });
