# Docker Compose for Gemini Enterprise Architect - Production
# Production-ready stack with security, monitoring, and resource limits

version: '3.8'

services:
  # Redis for caching and session storage with persistence
  redis:
    image: redis:7-alpine
    container_name: gemini-redis-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/configs/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - gemini-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL with production configuration
  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/configs/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user) -d $$(cat /run/secrets/postgres_db)"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - gemini-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Qdrant vector database with production settings
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: gemini-qdrant-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./docker/configs/qdrant-config.yaml:/qdrant/config/production.yaml
    environment:
      QDRANT__SERVICE__HOST: 0.0.0.0
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__WAL__WAL_CAPACITY_MB: 32
      QDRANT__STORAGE__WAL__WAL_SEGMENTS_AHEAD: 0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - gemini-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Knowledge Base and RAG System
  knowledge-base:
    build:
      context: .
      dockerfile: docker/knowledge.Dockerfile
      args:
        - PYTHON_VERSION=3.11
    image: gemini/knowledge-base:latest
    container_name: gemini-knowledge-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:8001:8001"
    environment:
      - PORT=8001
      - LOG_LEVEL=info
      - KNOWLEDGE_ENV=production
      - VECTOR_DB_HOST=qdrant
      - VECTOR_DB_PORT=6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - CHUNK_SIZE=512
      - CHUNK_OVERLAP=50
      - MAX_WORKERS=4
    volumes:
      - knowledge_data:/app/data
      - knowledge_logs:/app/logs
      - knowledge_cache:/app/cache
    secrets:
      - gemini_api_key
      - knowledge_encryption_key
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/knowledge/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - gemini-backend
      - gemini-frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Agent Server with production configuration
  agent-server:
    build:
      context: .
      dockerfile: docker/agent-server.Dockerfile
      args:
        - PYTHON_VERSION=3.11
        - NODE_VERSION=20
    image: gemini/agent-server:latest
    container_name: gemini-agent-server-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=info
      - APP_ENV=production
      - WORKERS=4
      - GRACEFUL_TIMEOUT=120
      - KEEP_ALIVE=5
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KNOWLEDGE_BASE_URL=http://knowledge-base:8001
    env_file:
      - ./docker/secrets/.env.prod
    volumes:
      - agent_logs:/app/logs
      - agent_data:/app/data
      - agent_cache:/app/cache
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - gemini_api_key
      - agent_encryption_key
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      knowledge-base:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - gemini-backend
      - gemini-frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: gemini-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d/gemini.prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - agent-server
      - knowledge-base
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - gemini-frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - gemini-monitoring
      - gemini-backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: gemini-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    secrets:
      - grafana_admin_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - gemini-monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

secrets:
  postgres_db:
    file: ./docker/secrets/postgres_db.txt
  postgres_user:
    file: ./docker/secrets/postgres_user.txt
  postgres_password:
    file: ./docker/secrets/postgres_password.txt
  gemini_api_key:
    file: ./docker/secrets/gemini_api_key.txt
  knowledge_encryption_key:
    file: ./docker/secrets/knowledge_encryption_key.txt
  agent_encryption_key:
    file: ./docker/secrets/agent_encryption_key.txt
  grafana_admin_password:
    file: ./docker/secrets/grafana_admin_password.txt

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  knowledge_data:
    driver: local
  knowledge_logs:
    driver: local
  knowledge_cache:
    driver: local
  agent_logs:
    driver: local
  agent_data:
    driver: local
  agent_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gemini-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  gemini-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  gemini-monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/16