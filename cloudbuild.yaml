# Gemini Enterprise Architect - Main CI/CD Pipeline
# Google Cloud Build configuration for comprehensive testing and building

steps:
  # Step 1: Initialize and restore dependencies
  - name: 'node:20-slim'
    id: 'npm-install'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing Node.js dependencies..."
        npm ci --workspaces
        npm run build:packages
    waitFor: ['-']

  # Step 2: Set up Python environment
  - name: 'python:3.11-slim'
    id: 'python-setup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up Python environment..."
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-cov pytest-xdist pytest-html
    waitFor: ['-']

  # Step 3: Lint and format check (parallel)
  - name: 'node:20-slim'
    id: 'lint-typescript'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Linting TypeScript code..."
        npm run lint:ci
        echo "Checking TypeScript formatting..."
        npm run format -- --check
    waitFor: ['npm-install']

  - name: 'python:3.11-slim'
    id: 'lint-python'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Linting Python code..."
        pip install flake8 black mypy
        flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
        black --check src tests
        mypy src --ignore-missing-imports
    waitFor: ['python-setup']

  # Step 4: TypeScript type checking
  - name: 'node:20-slim'
    id: 'typecheck'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running TypeScript type checking..."
        npm run typecheck
    waitFor: ['npm-install']

  # Step 5: Unit tests (parallel execution)
  - name: 'node:20-slim'
    id: 'test-typescript'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running TypeScript unit tests..."
        npm run test:ci
        echo "Running integration tests..."
        npm run test:integration:sandbox:none
    env:
      - 'CI=true'
    waitFor: ['lint-typescript', 'typecheck']

  - name: 'python:3.11-slim'
    id: 'test-python'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running Python tests with coverage..."
        python -m pytest tests/ -v \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=85 \
          --maxfail=5 \
          --tb=short \
          -x \
          --durations=10
        
        echo "Coverage report:"
        python -m coverage report --show-missing
    env:
      - 'PYTHONPATH=/workspace/src'
      - 'CI=true'
    waitFor: ['lint-python']

  # Step 6: Killer Demo Scaling Detection Test
  - name: 'python:3.11-slim'
    id: 'test-scaling-detection'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running Killer Demo: Scaling Detection Tests..."
        cd /workspace
        python -c "
        import sys
        sys.path.append('src')
        from killer_demo.scaling_detector import ScalingDetector
        
        detector = ScalingDetector()
        
        # Test N+1 detection
        test_code = '''
        def get_users_and_posts():
            users = User.query.all()
            for user in users:
                posts = Post.query.filter_by(user_id=user.id).all()
                print(f\"User {user.name} has {len(posts)} posts\")
        '''
        
        issues = detector.analyze_code(test_code, 'test.py')
        print(f'Found {len(issues)} scaling issues')
        for issue in issues:
            print(f'  - {issue.type}: {issue.description}')
        
        # Verify detection works
        n_plus_one_found = any(issue.type == 'n_plus_one' for issue in issues)
        if not n_plus_one_found:
            print('ERROR: N+1 detection failed!')
            sys.exit(1)
        
        print('âœ… Scaling detection working correctly')
        "
    waitFor: ['test-python']

  # Step 7: Security scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'security-scan'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running security scans..."
        
        # Scan Node.js dependencies
        npm audit --audit-level moderate || echo "Node.js audit warnings found"
        
        # Scan Python dependencies
        pip install safety bandit
        safety check || echo "Python safety warnings found"
        bandit -r src -f json -o bandit-report.json || echo "Bandit warnings found"
        
        # Check for secrets
        echo "Scanning for potential secrets..."
        grep -r -i "password\|secret\|key\|token" src/ || echo "No obvious secrets found"
    waitFor: ['python-setup', 'npm-install']

  # Step 8: Build TypeScript packages
  - name: 'node:20-slim'
    id: 'build-typescript'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building TypeScript packages..."
        npm run build:all
        npm run bundle
        
        echo "Verifying build artifacts..."
        ls -la bundle/
        ls -la packages/cli/dist/
        ls -la packages/core/dist/
    waitFor: ['test-typescript']

  # Step 9: Build Docker images (parallel)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-agent-server'
    args:
      - 'build'
      - '-f'
      - 'docker/agent-server.Dockerfile'
      - '-t'
      - '${_ARTIFACT_REGISTRY_URL}/agent-server:${BUILD_ID}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_URL}/agent-server:${BRANCH_NAME}-latest'
      - '.'
    waitFor: ['build-typescript', 'test-python']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-cli-sandbox'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile'
      - '-t'
      - '${_ARTIFACT_REGISTRY_URL}/cli-sandbox:${BUILD_ID}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_URL}/cli-sandbox:${BRANCH_NAME}-latest'
      - '--build-arg'
      - 'CLI_VERSION_ARG=${_CLI_VERSION}'
      - '.'
    waitFor: ['build-typescript']

  # Step 10: Container security scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'scan-containers'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Scanning container images for vulnerabilities..."
        gcloud container images scan ${_ARTIFACT_REGISTRY_URL}/agent-server:${BUILD_ID} \
          --format="table(vulnerability.effectiveSeverity,vulnerability.cvssScore,package,version)" \
          || echo "Container scan completed with warnings"
    waitFor: ['build-agent-server']

  # Step 11: Push images to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-agent-server'
    args:
      - 'push'
      - '--all-tags'
      - '${_ARTIFACT_REGISTRY_URL}/agent-server'
    waitFor: ['scan-containers']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-cli-sandbox'
    args:
      - 'push'
      - '--all-tags'
      - '${_ARTIFACT_REGISTRY_URL}/cli-sandbox'
    waitFor: ['build-cli-sandbox']

  # Step 12: Generate build artifacts and reports
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'generate-reports'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Generating build reports..."
        
        # Create build manifest
        cat > build-manifest.json << EOF
        {
          "buildId": "${BUILD_ID}",
          "commitSha": "${COMMIT_SHA}",
          "branchName": "${BRANCH_NAME}",
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "images": {
            "agentServer": "${_ARTIFACT_REGISTRY_URL}/agent-server:${BUILD_ID}",
            "cliSandbox": "${_ARTIFACT_REGISTRY_URL}/cli-sandbox:${BUILD_ID}"
          },
          "testResults": {
            "typescriptPassed": true,
            "pythonPassed": true,
            "coverageThreshold": 85,
            "scalingDetectionPassed": true
          }
        }
        EOF
        
        # Upload artifacts to Cloud Storage
        gsutil cp build-manifest.json gs://${_BUILD_ARTIFACTS_BUCKET}/builds/${BUILD_ID}/
        gsutil cp coverage.xml gs://${_BUILD_ARTIFACTS_BUCKET}/builds/${BUILD_ID}/ || echo "No coverage file"
        gsutil cp -r htmlcov gs://${_BUILD_ARTIFACTS_BUCKET}/builds/${BUILD_ID}/ || echo "No coverage HTML"
        
        echo "Build manifest uploaded to gs://${_BUILD_ARTIFACTS_BUCKET}/builds/${BUILD_ID}/"
    waitFor: ['push-agent-server', 'push-cli-sandbox']

# Build options
options:
  # Enable faster builds with higher resource allocation
  machineType: 'E2_HIGHCPU_8'
  
  # Use larger disk for Docker builds
  diskSizeGb: 100
  
  # Enable build logs
  logging: CLOUD_LOGGING_ONLY
  
  # Set environment variables
  env:
    - 'NODE_ENV=production'
    - 'PYTHONUNBUFFERED=1'
    - 'CI=true'

# Timeouts
timeout: '3600s'  # 1 hour total timeout

# Substitutions (variables)
substitutions:
  _ARTIFACT_REGISTRY_URL: '${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-containers'
  _BUILD_ARTIFACTS_BUCKET: 'gemini-build-artifacts-${PROJECT_ID}'
  _CLI_VERSION: '0.1.21'
  _REGION: 'us-central1'

# Available logs
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_ID}/secrets/github-token/versions/latest'
      env: 'GITHUB_TOKEN'

# Tags for organization
tags:
  - 'gemini-cli'
  - 'agent-platform'
  - 'ci-cd'