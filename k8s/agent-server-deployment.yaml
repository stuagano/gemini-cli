apiVersion: apps/v1
kind: Deployment
metadata:
  name: gemini-agent-server
  namespace: gemini
  labels:
    app: gemini-agent-server
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: gemini-agent-server
  template:
    metadata:
      labels:
        app: gemini-agent-server
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: gemini-agent-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: agent-server
        image: us-central1-docker.pkg.dev/PROJECT_ID/gemini-enterprise-repo/gemini-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: websocket
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        - name: WEBSOCKET_PORT
          value: "8001"
        - name: ENVIRONMENT
          value: "production"
        - name: PROJECT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['gcp.project.id']
        - name: REGION
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['gcp.region']
        - name: CLUSTER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['gke.cluster.name']
        
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: gemini-secrets
              key: database-url
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: db-host
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: db-name
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gemini-secrets
              key: db-password
        
        # Redis configuration
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: gemini-secrets
              key: redis-url
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: redis-port
        - name: REDIS_AUTH
          valueFrom:
            secretKeyRef:
              name: gemini-secrets
              key: redis-auth
        
        # Vertex AI configuration
        - name: VERTEX_AI_PROJECT
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: vertex-ai-project
        - name: VERTEX_AI_REGION
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: vertex-ai-region
        - name: VERTEX_AI_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: gemini-config
              key: vertex-ai-endpoint
        
        # DORA metrics configuration
        - name: DORA_METRICS_ENABLED
          value: "true"
        - name: DORA_DB_URL
          valueFrom:
            secretKeyRef:
              name: gemini-secrets
              key: dora-db-url
        
        # OpenTelemetry configuration
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_SERVICE_NAME
          value: "gemini-agent-server"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=gemini-agent-server,service.version=1.0.0"
        
        # Log level
        - name: LOG_LEVEL
          value: "INFO"
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/v1/ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: temp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      
      # Sidecar for log collection
      - name: log-collector
        image: gcr.io/google-containers/fluentd-gcp:1.6.0
        env:
        - name: FLUENTD_ARGS
          value: --no-supervisor -q
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "300Mi"
            cpu: "200m"
        volumeMounts:
        - name: logs-volume
          mountPath: /var/log
        - name: fluentd-config
          mountPath: /etc/fluent/config.d
      
      volumes:
      - name: config-volume
        configMap:
          name: gemini-config
      - name: temp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      - name: fluentd-config
        configMap:
          name: fluentd-config
      
      # Affinity rules for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gemini-agent-server
              topologyKey: kubernetes.io/hostname
      
      # Topology spread constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: gemini-agent-server

---
apiVersion: v1
kind: Service
metadata:
  name: gemini-agent-server
  namespace: gemini
  labels:
    app: gemini-agent-server
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "gemini-backend-config"}'
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: websocket
  selector:
    app: gemini-agent-server

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gemini-agent-server
  namespace: gemini
  annotations:
    iam.gke.io/gcp-service-account: gemini-enterprise-vertex-ai@PROJECT_ID.iam.gserviceaccount.com

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: gemini-backend-config
  namespace: gemini
spec:
  timeoutSec: 300
  connectionDraining:
    drainingTimeoutSec: 60
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /api/v1/health
    port: 8000
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600

---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: gemini-ssl-cert
  namespace: gemini
spec:
  domains:
    - gemini-agent.PROJECT_ID.run.app
    - api.gemini-enterprise.com